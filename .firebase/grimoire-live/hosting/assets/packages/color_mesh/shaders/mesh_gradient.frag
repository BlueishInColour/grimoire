{
  "sksl": {
    "entrypoint": "mesh_gradient_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uSize;\nuniform vec3 color0;\nuniform vec3 color1;\nuniform vec3 color2;\nuniform vec3 color3;\nuniform vec2 p0;\nuniform vec2 p1;\nuniform vec2 p2;\nuniform vec2 p3;\nuniform vec4 s2;\nuniform vec2 w0;\nuniform vec2 w1;\nuniform vec2 w2;\nuniform vec2 w3;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec4 FLT_flutter_local_grad(vec2 uv)\n{\n    vec2 P0 = vec2(0.100000001490116119384765625);\n    vec2 P1 = vec2(0.89999997615814208984375, 0.100000001490116119384765625);\n    vec2 P2 = vec2(0.100000001490116119384765625, 0.89999997615814208984375);\n    vec2 P3 = vec2(0.89999997615814208984375);\n    vec2 Q = P0 - P2;\n    vec2 R = P1 - P0;\n    vec2 S = (R + P2) - P3;\n    vec2 T = P0 - uv;\n    bool _60 = Q.x == 0.0;\n    bool _66;\n    if (_60)\n    {\n        _66 = S.x == 0.0;\n    }\n    else\n    {\n        _66 = _60;\n    }\n    float u;\n    float t;\n    if (_66)\n    {\n        u = (-T.x) / R.x;\n        t = (T.y + (u * R.y)) / (Q.y + (u * S.y));\n    }\n    else\n    {\n        bool _96 = Q.y == 0.0;\n        bool _102;\n        if (_96)\n        {\n            _102 = S.y == 0.0;\n        }\n        else\n        {\n            _102 = _96;\n        }\n        if (_102)\n        {\n            u = (-T.y) / (R.y + 9.9999997473787516355514526367188e-05);\n            t = (T.x + (u * R.x)) / ((Q.x + (u * S.x)) + 9.9999997473787516355514526367188e-05);\n        }\n        else\n        {\n            float A = (S.x * R.y) - (R.x * S.y);\n            float B = (((S.x * T.y) - (T.x * S.y)) + (Q.x * R.y)) - (R.x * Q.y);\n            float C = (Q.x * T.y) - (T.x * Q.y);\n            if (abs(A) < 9.9999997473787516355514526367188e-05)\n            {\n                u = (-C) / B;\n            }\n            else\n            {\n                u = ((-B) + sqrt((B * B) - ((4.0 * A) * C))) / (2.0 * (A + 9.9999997473787516355514526367188e-05));\n            }\n            t = (T.y + (u * R.y)) / (Q.y + (u * S.y));\n        }\n    }\n    u = clamp(u, 0.0, 1.0);\n    t = clamp(t, 0.0, 1.0);\n    t = smoothstep(0.0, 1.0, t);\n    u = smoothstep(0.0, 1.0, u);\n    vec4 colorA = mix(vec4(color0, 1.0), vec4(color2, 1.0), vec4(u));\n    vec4 colorB = mix(vec4(color1, 1.0), vec4(color3, 1.0), vec4(u));\n    return mix(colorA, colorB, vec4(t));\n}\n\nvoid FLT_main()\n{\n    vec2 uv_1 = FLT_flutter_local_FlutterFragCoord() / uSize;\n    vec2 p = (uv_1 * 2.0) - vec2(1.0);\n    vec2 q = vec2(0.0);\n    vec2 delta = p - p0;\n    float distsq = dot(delta, delta);\n    float H_i = sqrt(distsq + s2.x);\n    q += (w0 * H_i);\n    delta = p - p1;\n    distsq = dot(delta, delta);\n    H_i = sqrt(distsq + s2.y);\n    q += (w1 * H_i);\n    delta = p - p2;\n    distsq = dot(delta, delta);\n    H_i = sqrt(distsq + s2.z);\n    q += (w2 * H_i);\n    delta = p - p3;\n    distsq = dot(delta, delta);\n    H_i = sqrt(distsq + s2.w);\n    q += (w3 * H_i);\n    vec2 param = (q + vec2(1.0)) / vec2(2.0);\n    fragColor = FLT_flutter_local_grad(param);\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "uSize",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "color0",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "color1",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 3,
        "name": "color2",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 4,
        "name": "color3",
        "rows": 3,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 5,
        "name": "p0",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 6,
        "name": "p1",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 7,
        "name": "p2",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 8,
        "name": "p3",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 9,
        "name": "s2",
        "rows": 4,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 10,
        "name": "w0",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 11,
        "name": "w1",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 12,
        "name": "w2",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 13,
        "name": "w3",
        "rows": 2,
        "type": 10
      }
    ]
  }
}